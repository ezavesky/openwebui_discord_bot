# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on:
  # push:
  #   branches:
  #     - fix/fix-aws-deploy
  workflow_call:
    inputs:
      call-source:
        required: false
        type: string
  
env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: fyve/streamed_idea           # set this to your Amazon ECR repository name
  ECS_SERVICE: test                  # set this to your Amazon ECS service name
  ECS_CLUSTER: test                  # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: test.json                   # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: streamed_idea           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
permissions:    # as a workflow call instead of a triggered action - from https://stackoverflow.com/a/78230041
  id-token: write   # This is required for requesting the JWT
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_SHA: ${{ github.sha }}
          GH_FYVEREPO_DEPLOY_SSH_KEY: ${{secrets.GH_FYVEREPO_DEPLOY_SSH_KEY}}
        run: |
          # trick to get deploy token
          mkdir -p ~/.ssh
          echo "$GH_FYVEREPO_DEPLOY_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
  
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.

          IMAGE_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "Image Tag: $IMAGE_TAG ($ECR_REPOSITORY); SHA: $IMAGE_SHA; Container: $CONTAINER_NAME"

          ./.github/docker_build.sh $IMAGE_TAG
          docker tag $CONTAINER_NAME:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $CONTAINER_NAME:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true
